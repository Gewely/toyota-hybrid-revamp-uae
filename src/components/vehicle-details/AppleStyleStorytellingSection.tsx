// [Previous imports remain the same]

// Add new imports at the top
import { useFloating, FloatingPortal, offset, flip, shift } from '@floating-ui/react';
import { Tooltip } from '@/components/ui/tooltip';

// [Previous interfaces and hooks remain the same]

// Update the ProgressDots component to add tooltips
const ProgressDots: React.FC<{  scenes: StoryScene[];  currentScene: number;  onSceneChange: (index: number) => void;}> = ({ scenes, currentScene, onSceneChange }) => {  const [hoveredDot, setHoveredDot] = useState<number | null>(null);  const { refs, floatingStyles, context } = useFloating({    placement: 'top',    middleware: [offset(8), flip(), shift()]  });

  const handleKeyDown = (e: React.KeyboardEvent, index: number) => {    if (e.key === 'Enter' || e.key === ' ') {      e.preventDefault();      onSceneChange(index);    } else if (e.key === 'ArrowLeft' && index > 0) {      e.preventDefault();      onSceneChange(index - 1);    } else if (e.key === 'ArrowRight' && index < scenes.length - 1) {      e.preventDefault();      onSceneChange(index + 1);    }  };  
  return (    <div     className="flex space-x-3"     role="tablist"     aria-label="Story sections"    >      {scenes.map((scene, index) => (        <button          key={scene.id}          ref={hoveredDot === index ? refs.setReference : undefined}          role="tab"          aria-selected={index === currentScene}          aria-current={index === currentScene ? "true" : undefined}          aria-label={`${scene.title} - Scene ${index + 1} of ${scenes.length}`}          className={`relative group focus:outline-none focus:ring-2 focus:ring-white/50 focus:ring-offset-2 focus:ring-offset-black rounded-full transition-all duration-300 ${            index === currentScene             ? 'w-8 h-2'              : 'w-2 h-2 hover:w-3'          }`}          onClick={() => onSceneChange(index)}          onKeyDown={(e) => handleKeyDown(e, index)}          onMouseEnter={() => setHoveredDot(index)}          onMouseLeave={() => setHoveredDot(null)}          tabIndex={0}        >          <div            className={`w-full h-full rounded-full transition-all duration-500 ${              index === currentScene                ? 'bg-white shadow-lg shadow-white/20'                : 'bg-white/30 group-hover:bg-white/60 group-focus:bg-white/60'            }`}          />          {/* Active indicator with sharp animation */}          {index === currentScene && (            <motion.div              layoutId="activeIndicator"              className="absolute inset-0 rounded-full border border-white/40"              transition={{ type: "spring", stiffness: 400, damping: 40 }}            />          )}        </button>      ))}      {/* Tooltip */}      {hoveredDot !== null && (        <FloatingPortal>          <div            ref={refs.setFloating}            style={floatingStyles}            className="px-3 py-2 text-sm text-white bg-black/90 backdrop-blur-md rounded-lg border border-white/10"          >            {scenes[hoveredDot].title}          </div>        </FloatingPortal>      )}    </div>  );};

// Add Persistent Conversion Tray component
const ConversionTray: React.FC<{  isVisible: boolean;  onBookTestDrive: () => void;  onFinance: () => void;  onCompare: () => void;  onBrochure: () => void;}> = ({ isVisible, onBookTestDrive, onFinance, onCompare, onBrochure }) => {  return (    <motion.div      initial={{ opacity: 0, y: 20 }}      animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}      transition={{ duration: 0.6, ease: [0.32, 0.72, 0, 1] }}      className="fixed bottom-0 inset-x-0 z-50 pb-safe-area-inset"    >      <div className="max-w-screen-xl mx-auto px-4 pb-6">        <div className="bg-black/40 backdrop-blur-md border border-white/10 rounded-2xl p-4 flex items-center justify-between gap-4">          <Button            size="lg"            onClick={onBookTestDrive}            className="flex-1 bg-white text-black hover:bg-white/90 hover:scale-[1.02] active:scale-[0.98] transition-all duration-300"          >            Book Test Drive          </Button>          <div className="flex gap-3">            <Button              variant="outline"              onClick={onFinance}              className="border-white/20 hover:bg-white/10"            >              Finance            </Button>            <Button              variant="outline"              onClick={onCompare}              className="border-white/20 hover:bg-white/10"            >              Compare            </Button>            <Button              variant="ghost"              onClick={onBrochure}              className="text-white/70 hover:text-white"            >              Brochure            </Button>          </div>        </div>      </div>    </motion.div>  );};

// Update the main component to use new features
const AppleStyleStorytellingSection: React.FC<AppleStyleStorytellingProps> = ({  monthlyEMI,  setIsBookingOpen,  navigate,  setIsFinanceOpen,  onSafetyExplore,  onConnectivityExplore,  onHybridTechExplore,  onInteriorExplore,  galleryImages }) => {  // [Previous state and refs remain the same]  const [showConversionTray, setShowConversionTray] = useState(false);

  // Show conversion tray after delay  useEffect(() => {    const timer = setTimeout(() => setShowConversionTray(true), 1500);    return () => clearTimeout(timer);  }, []);

  // Update transition animations to remove blur  const contentTransitions = {    initial: {      opacity: 0,      y: reducedMotion ? 0 : 30,    },    animate: {      opacity: 1,      y: 0,    },    exit: {      opacity: 0,      y: reducedMotion ? 0 : -20,    },    transition: {      duration: reducedMotion ? 0.2 : 0.6,      ease: [0.32, 0.72, 0, 1]    }  };

  return (    <section      ref={containerRef}      className="relative h-screen bg-black overflow-hidden"      role="region"      aria-label="Interactive vehicle story"      aria-live="polite"      style={{       position: 'sticky',        top: 0,        willChange: 'transform',        WebkitTransform: 'translate3d(0, 0, 0)',      }}    >      {/* Background Media with optimized transitions */}      <motion.div        className="absolute inset-0 z-0"        style={{         scale: backgroundScale,         y: parallaxY,        }}      >        <AnimatePresence mode="wait">          <motion.div            key={`scene-${currentScene}`}            initial={{             opacity: 0,             scale: 1.015,            }}            animate={{             opacity: 1,             scale: 1,            }}            exit={{             opacity: 0,             scale: 0.985,            }}            transition={{             duration: reducedMotion ? 0.3 : 0.8,             ease: [0.32, 0.72, 0, 1]            }}            className="w-full h-full"          >            <SceneMedia             scene={currentStory}             isActive={true}             reducedMotion={!!reducedMotion}            />          </motion.div>        </AnimatePresence>      </motion.div>

      {/* Main Content with enhanced typography */}      <motion.div        className="relative z-10 h-full flex items-center justify-center px-4 py-8 safe-area-inset"        style={{ opacity: contentOpacity }}      >        <div className="w-full max-w-screen-xl mx-auto text-center text-white">          <AnimatePresence mode="wait">            <motion.div              key={`content-${currentScene}`}              {...contentTransitions}              className="space-y-6 md:space-y-8 max-w-5xl mx-auto"            >              {/* Scene indicator badge */}              <motion.div                initial={{ opacity: 0, scale: 0.9 }}                animate={{ opacity: 1, scale: 1 }}                transition={{ delay: 0.1 }}                className="inline-block"              >                <Badge                 className="bg-white/10 text-white border-white/15 backdrop-blur-md px-3 py-1 text-xs font-medium tracking-wide"                 aria-label={`Scene ${currentScene + 1} of ${totalScenes}`}                >                  {currentScene + 1} / {totalScenes}                </Badge>              </motion.div>

              {/* Enhanced typography with text balance and proper line clamping */}              <div className="space-y-3 md:space-y-4">                <motion.h1                  initial={{ opacity: 0, y: 20 }}                  animate={{ opacity: 1, y: 0 }}                  transition={{ delay: 0.2, duration: 0.8 }}                  className="text-4xl md:text-6xl lg:text-7xl xl:text-8xl font-extralight tracking-tighter leading-[0.9] text-white [text-wrap:balance] line-clamp-2"                  style={{                   fontFeatureSettings: '"kern" 1, "liga" 1, "ss01" 1',                  textRendering: 'optimizeLegibility',                  }}                >                  {currentStory.title}                </motion.h1>                
                <motion.h2                  initial={{ opacity: 0, y: 15 }}                  animate={{ opacity: 1, y: 0 }}                  transition={{ delay: 0.3, duration: 0.6 }}                  className="text-lg md:text-xl lg:text-2xl xl:text-3xl font-light text-white/85 tracking-wide mx-auto [text-wrap:balance] line-clamp-2"                  style={{ maxWidth: '65ch' }}                >                  {currentStory.subtitle}                </motion.h2>              </div>

              {/* Enhanced description with optimal line length */}              <motion.p                initial={{ opacity: 0, y: 15 }}                animate={{ opacity: 1, y: 0 }}                transition={{ delay: 0.4, duration: 0.6 }}                className="text-base md:text-lg lg:text-xl text-white/75 mx-auto leading-relaxed font-light"                style={{ maxWidth: '65ch' }}              >                {currentStory.description}              </motion.p>

              {/* Glass morphism stats with hover effects */}              {currentStory.stats && (                <motion.div                  initial={{ opacity: 0, y: 20 }}                  animate={{ opacity: 1, y: 0 }}                  transition={{ delay: 0.5, duration: 0.6 }}                  className="grid grid-cols-3 gap-4 md:gap-6 max-w-lg mx-auto"                >                  {currentStory.stats.map((stat, index) => (                    <motion.div                      key={`${stat.label}-${currentScene}`}                      initial={{ opacity: 0, scale: 0.9 }}                      animate={{ opacity: 1, scale: 1 }}                      transition={{                       delay: 0.6 + index * 0.1,                       duration: 0.4                     }}                      className="group p-3 md:p-4 rounded-xl bg-white/5 backdrop-blur-md border border-white/10 hover:border-white/20 hover:bg-white/[0.08] hover:scale-[1.02] transition-all duration-300"                      style={{                        boxShadow: '0 4px 24px -12px rgba(0, 0, 0, 0.3)',                      }}                    >                      {stat.icon && (                        <div className="flex justify-center mb-2 text-white/70 group-hover:text-white/90 transition-colors">                          {stat.icon}                        </div>                      )}                      <div className="text-lg md:text-xl font-light text-white tracking-tight">                        {stat.value}                      </div>                      <div className="text-xs md:text-sm text-white/65 uppercase tracking-wider font-medium mt-1">                        {stat.label}                      </div>                    </motion.div>                  ))}                </motion.div>              )}

              {/* Glass morphism features */}              {currentStory.features && (                <motion.div                  initial={{ opacity: 0, y: 20 }}                  animate={{ opacity: 1, y: 0 }}                  transition={{ delay: 0.5, duration: 0.6 }}                  className="grid grid-cols-2 md:grid-cols-4 gap-3 md:gap-4 max-w-3xl mx-auto"                >                  {currentStory.features.map((feature, index) => (                    <motion.div                      key={`${feature}-${currentScene}`}                      initial={{ opacity: 0, y: 10 }}                      animate={{ opacity: 1, y: 0 }}                      transition={{                       delay: 0.6 + index * 0.05,                       duration: 0.4                     }}                      className="p-3 text-sm md:text-base text-white/85 bg-white/[0.03] rounded-lg border border-white/5 backdrop-blur-sm hover:bg-white/[0.08] hover:border-white/15 hover:scale-[1.02] transition-all duration-300"                    >                      {feature}                    </motion.div>                  ))}                </motion.div>              )}

              {/* Enhanced CTAs */}              {currentStory.cta && (                <motion.div                  initial={{ opacity: 0, scale: 0.95 }}                  animate={{ opacity: 1, scale: 1 }}                  transition={{ delay: 0.7, duration: 0.5 }}                  className="pt-4 md:pt-6 space-y-4"                >                  <div className="flex flex-col sm:flex-row items-center justify-center gap-4">                    <Button                      size="lg"                      variant={currentStory.cta.variant === 'primary' ? 'default' : 'outline'}                      onClick={currentStory.cta.action}                      className={`group relative min-h-[48px] min-w-[180px] px-8 py-3 text-base md:text-lg font-medium backdrop-blur-md transition-all duration-300 ${                        currentStory.cta.variant === 'primary'                          ? 'bg-white text-black hover:bg-white/95 hover:scale-105 shadow-lg shadow-white/20'                          : 'border-white/25 text-white hover:bg-white/10 hover:border-white/40 hover:scale-105'                      } focus:ring-2 focus:ring-white/50 focus:ring-offset-2 focus:ring-offset-black/50`}                    >                      {currentStory.cta.label}                      <ChevronRight className="ml-2 h-4 w-4 inline-block group-hover:translate-x-1 transition-transform" />                    </Button>                  </div>                </motion.div>              )}            </motion.div>          </AnimatePresence>        </div>      </motion.div>

      {/* Enhanced Progress Navigation with tooltips */}      <div className="absolute bottom-6 md:bottom-8 left-1/2 -translate-x-1/2 z-20 px-4">        <ProgressDots         scenes={storyScenes}         currentScene={currentScene}         onSceneChange={setCurrentScene}        />      </div>

      {/* Persistent Conversion Tray */}      <ConversionTray      isVisible={showConversionTray}      onBookTestDrive={() => setIsBookingOpen(true)}      onFinance={() => setIsFinanceOpen(true)}      onCompare={() => navigate('/compare')}      onBrochure={() => navigate('/brochure')}      />

      {/* Scroll hint with improved animation */}      {currentScene === 0 && !reducedMotion && (        <motion.div          initial={{ opacity: 0, y: 10 }}          animate={{ opacity: 1, y: 0 }}          transition={{ delay: 2, duration: 1 }}          className="absolute bottom-24 md:bottom-28 left-1/2 -translate-x-1/2 text-white/60 text-xs md:text-sm text-center pointer-events-none"          dir="ltr"        >          <div className="space-y-2">            <div className="font-light tracking-wide">Scroll to explore</div>            <motion.div              animate={{ y: [0, 4, 0] }}              transition={{ repeat: Infinity, duration: 2, ease: "easeInOut" }}              className="text-white/40 text-lg"              aria-hidden="true"            >              ↓            </motion.div>          </div>        </motion.div>      )}    </section>  );};

export default AppleStyleStorytellingSection;